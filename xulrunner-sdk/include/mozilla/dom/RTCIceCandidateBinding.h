/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#ifndef mozilla_dom_RTCIceCandidateBinding_h__
#define mozilla_dom_RTCIceCandidateBinding_h__

#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/CallbackInterface.h"
#include "mozilla/dom/DOMJSClass.h"
#include "mozilla/dom/DOMJSProxyHandler.h"

namespace mozilla {
namespace dom {

struct RTCIceCandidateInit;
class mozRTCIceCandidate;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

template <>
struct PrototypeTraits<prototypes::id::mozRTCIceCandidate>
{
  enum
  {
    Depth = 0
  };
  typedef mozilla::dom::mozRTCIceCandidate NativeType;
};
template <>
struct PrototypeIDMap<mozilla::dom::mozRTCIceCandidate>
{
  enum
  {
    PrototypeID = prototypes::id::mozRTCIceCandidate
  };
};
} // namespace dom
} // namespace mozilla


namespace mozilla {
namespace dom {

struct RTCIceCandidateInit : public MainThreadDictionaryBase
{
  nsString mCandidate;
  Optional<uint16_t > mSdpMLineIndex;
  nsString mSdpMid;

private:
  static bool initedIds;
  static jsid candidate_id;
  static jsid sdpMLineIndex_id;
  static jsid sdpMid_id;

  RTCIceCandidateInit(const RTCIceCandidateInit&) MOZ_DELETE;

public:
  inline RTCIceCandidateInit()
  {
  }

  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value");

  bool
  Init(const nsAString& aJSON);

  bool
  ToObject(JSContext* cx, JS::Handle<JSObject*> parentObject, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

private:
  static bool
  InitIds(JSContext* cx);
};
struct RTCIceCandidateInitInitializer : public RTCIceCandidateInit
{
  inline RTCIceCandidateInitInitializer()
  {
    // Safe to pass a null context if we pass a null value
    Init(nullptr, JS::NullHandleValue);
  }
};


namespace mozRTCIceCandidateBinding {

  extern const NativePropertyHooks sNativePropertyHooks;

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, JS::Heap<JSObject*>* protoAndIfaceArray);

  inline JS::Handle<JSObject*> GetProtoObject(JSContext* aCx, JS::Handle<JSObject*> aGlobal)
  {

    /* Get the interface prototype object for this class.  This will create the
       object as needed. */

    /* Make sure our global is sane.  Hopefully we can remove this sometime */
    if (!(js::GetObjectClass(aGlobal)->flags & JSCLASS_DOM_GLOBAL)) {
      return JS::NullPtr();
    }
    /* Check to see whether the interface objects are already installed */
    JS::Heap<JSObject*>* protoAndIfaceArray = GetProtoAndIfaceArray(aGlobal);
    if (!protoAndIfaceArray[prototypes::id::mozRTCIceCandidate]) {
      CreateInterfaceObjects(aCx, aGlobal, protoAndIfaceArray);
    }

    /*
     * The object might _still_ be null, but that's OK.
     *
     * Calling fromMarkedLocation() is safe because protoAndIfaceArray is
     * traced by TraceProtoAndIfaceCache() and its contents are never
     * changed after they have been set.
     */
    return JS::Handle<JSObject*>::fromMarkedLocation(protoAndIfaceArray[prototypes::id::mozRTCIceCandidate].address());
  }

  inline JS::Handle<JSObject*> GetConstructorObject(JSContext* aCx, JS::Handle<JSObject*> aGlobal)
  {

    /* Get the interface object for this class.  This will create the object as
       needed. */

    /* Make sure our global is sane.  Hopefully we can remove this sometime */
    if (!(js::GetObjectClass(aGlobal)->flags & JSCLASS_DOM_GLOBAL)) {
      return JS::NullPtr();
    }
    /* Check to see whether the interface objects are already installed */
    JS::Heap<JSObject*>* protoAndIfaceArray = GetProtoAndIfaceArray(aGlobal);
    if (!protoAndIfaceArray[constructors::id::mozRTCIceCandidate]) {
      CreateInterfaceObjects(aCx, aGlobal, protoAndIfaceArray);
    }

    /*
     * The object might _still_ be null, but that's OK.
     *
     * Calling fromMarkedLocation() is safe because protoAndIfaceArray is
     * traced by TraceProtoAndIfaceCache() and its contents are never
     * changed after they have been set.
     */
    return JS::Handle<JSObject*>::fromMarkedLocation(protoAndIfaceArray[constructors::id::mozRTCIceCandidate].address());
  }

  JSObject*
  DefineDOMInterface(JSContext* aCx, JS::Handle<JSObject*> aGlobal, JS::Handle<jsid> id, bool* aEnabled);

  bool
  ConstructorEnabled(JSContext* /* unused */, JS::Handle<JSObject*> /* unused */);

  extern DOMJSClass Class;

  JSObject*
  Wrap(JSContext* aCx, JS::Handle<JSObject*> aScope, mozilla::dom::mozRTCIceCandidate* aObject, nsWrapperCache* aCache);

  template <class T>
  inline JSObject* Wrap(JSContext* aCx, JS::Handle<JSObject*> aScope, T* aObject)
  {
    return Wrap(aCx, aScope, aObject, aObject);
  }

} // namespace mozRTCIceCandidateBinding



class mozRTCIceCandidateJSImpl : public CallbackInterface
{
public:
  explicit inline mozRTCIceCandidateJSImpl(JSObject* aCallback)
    : CallbackInterface(aCallback)
  {
  }

  void __Init(const RTCIceCandidateInit& candidateInitDict, ErrorResult& aRv, ExceptionHandling aExceptionHandling = eReportExceptions);

  void GetCandidate(nsString& retval, ErrorResult& aRv, ExceptionHandling aExceptionHandling = eReportExceptions);

  void GetSdpMid(nsString& retval, ErrorResult& aRv, ExceptionHandling aExceptionHandling = eReportExceptions);

  Nullable<uint16_t > GetSdpMLineIndex(ErrorResult& aRv, ExceptionHandling aExceptionHandling = eReportExceptions);

  void SetCandidate(const nsAString& arg, ErrorResult& aRv, ExceptionHandling aExceptionHandling = eReportExceptions);

  void SetSdpMid(const nsAString& arg, ErrorResult& aRv, ExceptionHandling aExceptionHandling = eReportExceptions);

  void SetSdpMLineIndex(const Nullable<uint16_t >& arg, ErrorResult& aRv, ExceptionHandling aExceptionHandling = eReportExceptions);
};


class mozRTCIceCandidate MOZ_FINAL : public nsISupports,
                                     public nsWrapperCache
{
public:
  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(mozRTCIceCandidate)

private:
  nsRefPtr<mozRTCIceCandidateJSImpl> mImpl;
  nsCOMPtr<nsISupports> mParent;

public:
  mozRTCIceCandidate(JS::Handle<JSObject*> aJSImplObject, nsPIDOMWindow* aParent);

  nsISupports* GetParentObject() const;

  virtual JSObject* WrapObject(JSContext* aCx, JS::Handle<JSObject*> aScope) MOZ_OVERRIDE;

  static already_AddRefed<mozRTCIceCandidate> Constructor(const GlobalObject& global, JSContext* cx, const RTCIceCandidateInit& candidateInitDict, ErrorResult& aRv);

  void GetCandidate(nsString& retval, ErrorResult& aRv) const;

  void SetCandidate(const nsAString& arg, ErrorResult& aRv);

  void GetSdpMid(nsString& retval, ErrorResult& aRv) const;

  void SetSdpMid(const nsAString& arg, ErrorResult& aRv);

  Nullable<uint16_t > GetSdpMLineIndex(ErrorResult& aRv) const;

  void SetSdpMLineIndex(const Nullable<uint16_t >& arg, ErrorResult& aRv);

  static JSBool
  _Create(JSContext* cx, unsigned argc, JS::Value* vp);
};


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_RTCIceCandidateBinding_h__
