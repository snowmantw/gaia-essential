/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#ifndef mozilla_dom_RTCConfigurationBinding_h__
#define mozilla_dom_RTCConfigurationBinding_h__

#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/DOMJSClass.h"
#include "mozilla/dom/DOMJSProxyHandler.h"

namespace mozilla {
namespace dom {

struct RTCIceServer;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct RTCIceServer : public MainThreadDictionaryBase
{
  nsString mCredential;
  Optional<nsString > mUrl;
  nsString mUsername;

private:
  static bool initedIds;
  static jsid credential_id;
  static jsid url_id;
  static jsid username_id;

  RTCIceServer(const RTCIceServer&) MOZ_DELETE;

public:
  inline RTCIceServer()
  {
  }

  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value");

  bool
  Init(const nsAString& aJSON);

  bool
  ToObject(JSContext* cx, JS::Handle<JSObject*> parentObject, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

private:
  static bool
  InitIds(JSContext* cx);
};
struct RTCIceServerInitializer : public RTCIceServer
{
  inline RTCIceServerInitializer()
  {
    // Safe to pass a null context if we pass a null value
    Init(nullptr, JS::NullHandleValue);
  }
};


struct RTCConfiguration : public MainThreadDictionaryBase
{
  Optional<Sequence<RTCIceServer > > mIceServers;

private:
  static bool initedIds;
  static jsid iceServers_id;

  RTCConfiguration(const RTCConfiguration&) MOZ_DELETE;

public:
  inline RTCConfiguration()
  {
  }

  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value");

  bool
  Init(const nsAString& aJSON);

  bool
  ToObject(JSContext* cx, JS::Handle<JSObject*> parentObject, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

private:
  static bool
  InitIds(JSContext* cx);
};
struct RTCConfigurationInitializer : public RTCConfiguration
{
  inline RTCConfigurationInitializer()
  {
    // Safe to pass a null context if we pass a null value
    Init(nullptr, JS::NullHandleValue);
  }
};


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_RTCConfigurationBinding_h__
